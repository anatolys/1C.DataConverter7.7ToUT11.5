&НаСервере  
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	Объект.Период.ДатаНачала=ТекущаяДата(); 
	
	Объект.Период.ДатаОкончания=ТекущаяДата();
	
	Объект.ПутьИБ="D:\Путь к папке с базой 1С 7.7\";  
	
	ПереносПоступленийДенег=Истина;
	ПереносЗаказовПоставщикам=Истина;
	ПереносПлатежек=Истина;

КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	ОткрытьДиалогСтандартногоПериода(Объект, , Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогСтандартногоПериода(Контейнер, ИмяРеквизита = "Период", УстановитьЗнПрКомпоновщика = Ложь) Экспорт
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала 	= Контейнер[ИмяРеквизита].ДатаНачала;
	Диалог.Период.ДатаОкончания = Контейнер[ИмяРеквизита].ДатаОкончания;
	Диалог.Период.Вариант		= Контейнер[ИмяРеквизита].Вариант;
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Контейнер"	, Контейнер);
	ДопПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	ДопПараметры.Вставить("УстановитьЗнПрКомпоновщика", УстановитьЗнПрКомпоновщика);
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, ДопПараметры);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры // ОткрытьДиалогСтандартногоПериода()

&НаКлиенте
Процедура ВыборПериодаЗавершение(ПериодРезультат, ДопПараметры) Экспорт
	
	Если ПериодРезультат <> Неопределено Тогда
		
		ИмяРеквизита = ДопПараметры.ИмяРеквизита;
		
		ДопПараметры.Контейнер[ИмяРеквизита].ДатаНачала    = ПериодРезультат.ДатаНачала;
		ДопПараметры.Контейнер[ИмяРеквизита].ДатаОкончания = ПериодРезультат.ДатаОкончания;
														
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПериодаЗавершение

&НаКлиенте
Процедура НачатьЗагрузку(Команда)
	
	ОчиститьСообщения(); 

	Попытка
		ЗагрузитьСчетаНаСервере();
	Исключение
		Инфо = ИнформацияОбОшибке();
		Сообщить("Описание: '" + Инфо.Описание + "'");
	КонецПопытки;
	
КонецПроцедуры  

&НаСервере
Процедура ЗагрузитьСчетаНаСервере()
	
	V7=ПодключитьБазу7(Объект.ПутьИБ);
	
    // 1 Заказ Клиента
	ЗаказыКлиентов=ПолучитьТаблицуЗаказовКлиентов(V7);
	
    // 5 Заказ Клиента
	СоздатьОбновитьЗаказыКлиентов(ЗаказыКлиентов);   
	
	Если ПереносПоступленийДенег Тогда
		СоздатьОбновитьПриходыДенег(V7);
	КонецЕсли;
	
	Если ПереносЗаказовПоставщикам Тогда
		ЗаказыПоставщикам=ПолучитьТаблицуЗаказовПоставщикам(V7); 
	    // 1 Заказ Поставщику
		СоздатьОбновитьЗазазыПоставщикам(ЗаказыПоставщикам, V7);
	КонецЕсли;
		
	V7="";
	
	Message("OK"); 
	
КонецПроцедуры 

&НаСервере
функция ПодключитьБазу7(ПутьИБ)
	
		// Validate if 7.7 DB file exists
	ИмяФайла=TrimAll(Объект.ПутьИБ);   
	
	  Баз=Новый Файл(ИмяФайла+"1cv7.md");
	  
	  Если НЕ Баз.Существует() Тогда  
		  
		Message("Не задан путь ИБ!"); 
		
		return Новый ДеревоЗначений; 
		
	  endif;
	
	// Create 7.7 DB connection
  	V7="";
	
  	V7=Новый COMОбъект("V1CEnterprise.Application");
	
	try 
		РезультатСоединения = V7.Initialize(V7.RMTrade,"/D"+ИмяФайла+" /NИмяПользователя /PПароль","NO_SPLASH_SHOW");
		
		если не РезультатСоединения тогда
			
     		Сообщить("Не удалось открыть базу данных! ПолучитьТаблицуЗаказов1 " + ИмяФайла);
			
     		Сообщить(ОписаниеОшибки());
     	//Ответ = "Error"
   		конецесли;
		//Сообщить(РезультатСоединения);

	except  
		//+"""","NO_SPLASH_SHOW") 
		Message("Ошибка открытия ИБ");
		
		V7=""; 
		
		return ИмяФайла;
		
	endtry;
	
	Возврат V7;
	
конецфункции

&НаСервере
функция ПолучитьДокументыПрихода(V7)
		
	try  
	 	ДокПриход=V7.CreateObject("Документ.ПриходДенегНаСчет"); 
		//ДокПриход=V7.СоздатьОбъект("Документ.ПриходДенегНаСчет");
		
		// Getting values for paid invoices 
		ДокПриход.ВыбратьДокументы(Объект.Период.ДатаНачала,Объект.Период.ДатаОкончания); 
		
		//если Не ДокПриход тогда
		если ДокПриход.ВыбратьДокументы(Объект.Период.ДатаНачала,Объект.Период.ДатаОкончания) <> 1 Тогда
			
			Сообщить("Не удалось открыть Документ в функции ПолучитьТаблицуЗаказов!"); 
			
			Сообщить(ОписаниеОшибки()); 
			
		//Ответ = "Error"
		конецесли;
	
	//Сообщить(РезультатСоединения);
	except                                                      
		
		Message("Ошибка открытия Документ ПриходДенегНаСчет");

	endtry;

    Возврат ДокПриход;
	
конецфункции



// 1 Заказ Клиента ==============================================================
&НаСервере
функция ПолучитьТаблицуЗаказовКлиентов(V7)
		
	// Create data structure for 7.7 invoice data
	Табл=СформироватьСтолбцыТаблицыЗаказовКлиентов();

	// Try to open payment docs list 
	ДокПриход=ПолучитьДокументыПрихода(V7); 
	
	while ДокПриход.ПолучитьДокумент()=1 do
		
		// Skip not posted invoices
		if ДокПриход.Проведен()=0 then
			continue;
		endif;   
		
		// Iterate trough paiment docs
		ДокПриход.ВыбратьСтроки(); 
		
		while ДокПриход.ПолучитьСтроку() do 
			
			// In fact Док is invoice object
			Счет7=ДокПриход.ПоСчету;

			видСч=Счет7.Вид();
			
			// Skip if doc is not invoice
			Если НЕ СтрНайти(видСч,"Счет")=1 Тогда	
				continue;
			КонецЕсли;
			
			// Skip docs not having prepaid status
			if (Find(ДокПриход.ВидПриходаРасхода.Наименование,"Предоплата")=0) 
				And (Find(ДокПриход.ВидПриходаРасхода.Наименование,"Оплата за товар")=0) 
				And (Find(ДокПриход.ВидПриходаРасхода.Наименование,"Выполнение работ")=0) 
				And (Find(ДокПриход.ВидПриходаРасхода.Наименование,"Оплата CSP")=0) then
				continue;
			endif; 
			
			// Create structure for invoices
			СтрДок=Табл.Строки.Добавить(); 
			
			ЗаполнитьЗаказКлиентаВДерЗнач(СтрДок,Счет7,V7);
									
			// Get data from invoice
			Счет7.ВыбратьСтроки(); 
			
			while Счет7.ПолучитьСтроку()=1 do
				
				// Create structure for invoice positions
				Стр=СтрДок.Строки.Добавить();
				
				// Fill position data to structure
				ЗаполнитьТоварнуюПозициюВЗаказеКлиентаВДерЗнач(Стр,Счет7,V7,видСч);
								
			enddo;
			
		enddo;
	enddo;

	//// Print for debugging
	//РаспечататьТаблицу(Табл);
	
	return Табл;
	
конецфункции

// 2 Заказ Клиента
&НаСервере
функция СформироватьСтолбцыТаблицыЗаказовКлиентов()
	
	Табл=Новый ДеревоЗначений;  
	
	Табл.Колонки.Добавить("НомерДок");  
	Табл.Колонки.Добавить("ДатаДок");
	Табл.Колонки.Добавить("Партнер");
	Табл.Колонки.Добавить("Контрагент");
	Табл.Колонки.Добавить("Организация");
	Табл.Колонки.Добавить("Соглашение");
	Табл.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Табл.Колонки.Добавить("Склад");	
	Табл.Колонки.Добавить("Менеджер");
	Табл.Колонки.Добавить("Статус");
	Табл.Колонки.Добавить("ДатаСогласования");
	Табл.Колонки.Добавить("Согласован");
	Табл.Колонки.Добавить("БанковскийСчет");
	Табл.Колонки.Добавить("АдресДоставки");	
	Табл.Колонки.Добавить("НалогообложениеНДС"); 
	Табл.Колонки.Добавить("ЦенаВключаетНДС");
	Табл.Колонки.Добавить("ХозяйственнаяОперация");
	Табл.Колонки.Добавить("Комментарий");
	Табл.Колонки.Добавить("Договор");
	Табл.Колонки.Добавить("Подразделение");
	Табл.Колонки.Добавить("Автор");
    Табл.Колонки.Добавить("ПорядокРасчетов");
	Табл.Колонки.Добавить("СпособДоставки");
	Табл.Колонки.Добавить("КонтактноеЛицо");
	Табл.Колонки.Добавить("Руководитель");
	Табл.Колонки.Добавить("Приоритет");
	Табл.Колонки.Добавить("АдресДоставкиЗначение");
	Табл.Колонки.Добавить("Товар");
	Табл.Колонки.Добавить("КоличествоУпаковок");
	Табл.Колонки.Добавить("Количество");
    Табл.Колонки.Добавить("Цена");
	Табл.Колонки.Добавить("СтавкаНДС");
	Табл.Колонки.Добавить("СуммаНДС");
	Табл.Колонки.Добавить("СуммаБезНДС");
	Табл.Колонки.Добавить("СуммаСНДС");
	Табл.Колонки.Добавить("Содержание"); 	// CSP 
	Табл.Колонки.Добавить("ВариантОбеспечения");
	Табл.Колонки.Добавить("Обособленно");
	
	Возврат Табл;
	
конецфункции

// 3 Заказ Клиента
&НаСервере
Процедура ЗаполнитьЗаказКлиентаВДерЗнач(СтрДок,Счет7,V7)
	
	// Get number оf invoice
	СтрДок.НомерДок=Счет7.НомерДок;           
	
	// Get invoice date
	СтрДок.ДатаДок=Счет7.ДатаДок;
	
	// Get partner or create
	СтрДок.Партнер=ДобавитьОбновитьПартнера8(Счет7);
	
	ДобавитьОбновитьКонтактыПартнера(Счет7,V7);
	
	// Get Contragent or create Шаг 5 (4-1) 
	СтрДок.Контрагент=ДобавитьОбновитьКонтрагента8(Счет7);
	
	ДобавитьОбновитьКонтактыКонтрагента(Счет7,V7);
	
	СтрДок.Организация=Справочники.Организации.НайтиПоНаименованию("АЛВ ГРУП ООО");
	
	// Get agreement
	Если Счет7.КредитРазрешен.Выбран()=1 Тогда		
		СтрДок.Соглашение = Справочники.СоглашенияСКлиентами.НайтиПоНаименованию("Оптовые продажи в кредит",Ложь);		
	Иначе 		
		СтрДок.Соглашение = Справочники.СоглашенияСКлиентами.НайтиПоНаименованию("Оптовые продажи по предоплате",Ложь);		
	КонецЕсли;
	
	СтрДок.Валюта=Справочники.Валюты.НайтиПоКоду(Счет7.Валюта.КодЦифровой);
	
	СтрДок.Склад=Справочники.Склады.НайтиПоНаименованию("Основной",Ложь);
	
	СтрДок.Менеджер=Справочники.Пользователи.НайтиПоНаименованию(Счет7.Автор.ФИО);  
	
	СтрДок.Статус=Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	
	СтрДок.ДатаСогласования=Счет7.ДатаРазрКред;
							
	СтрДок.Согласован=Счет7.КредитРазрешен.Выбран();
	
	СтрДок.БанковскийСчет=Справочники.БанковскиеСчетаОрганизаций.НайтиПоРеквизиту("НомерСчета","40702810902800000113");
	
	СтрДок.АдресДоставки=Счет7.АдресДоставки.Адрес;
	
	Если СокрЛП(Счет7.ЕстьНДС)="Да" Тогда
		СтрДок.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		СтрДок.ЦенаВключаетНДС=Истина;
	Иначе
		СтрДок.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС; 
	КонецЕсли;
	
	СтрДок.ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.РеализацияКлиенту;		

	СтрДок.Комментарий="***Счет "+Счет7.НомерДок+" от "+Лев(Счет7.ДатаДок,10);						
				
	// Get agreement
	СтрДок.Договор=ДобавитьОбновитьДоговор8(Счет7);
	
	ДобавитьОбновитьБанковскиеСчета(Счет7,V7); 
	
	СтрДок.Подразделение=Справочники.СтруктураПредприятия.НайтиПоНаименованию("Основное подразделение",Ложь); 
	
	СтрДок.Автор=Счет7.Автор.ФИО;
	
	СтрДок.ПорядокРасчетов=Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	
	Если СокрЛП(Счет7.АдресДоставки.Адрес)<>"" Тогда			
		СтрДок.СпособДоставки=Перечисления.СпособыДоставки.ДоКлиента;		
	Иначе		
		СтрДок.СпособДоставки=Перечисления.СпособыДоставки.Самовывоз;		
	КонецЕсли; 
	
	Выб=Справочники.КонтактныеЛицаПартнеров.Выбрать();
	Пока Выб.Следующий() Цикл
		Если Выб.Наименование=СокрЛП(Счет7.КонтактноеЛицо.ФИО) И Выб.Владелец=Счет7.Клиент Тогда
			СтрДок.КонтактноеЛицо=Выб.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	СтрДок.Руководитель=Справочники.Пользователи.НайтиПоНаименованию("Савинов С.Ю.",Ложь); 
	
	СтрДок.Приоритет=Справочники.Приоритеты.НайтиПоНаименованию("Средний",Ложь);
	
	СтрДок.АдресДоставкиЗначение=Счет7.АдресДоставки.Адрес;
		
КонецПроцедуры

// 4 Заказ Клиента
&НаСервере
Процедура ЗаполнитьТоварнуюПозициюВЗаказеКлиентаВДерЗнач(Стр,Счет7,V7,видСч)
	
	// Get of create product
	Стр.Товар=ДобавитьОбновитьТовар(Счет7.Товар,видСч);
	
	// Otherwicse quantity will equals to 0
	Стр.КоличествоУпаковок=1;
	
	// Get product quantity
	Стр.Количество=Счет7.Количество*Счет7.Коэффициент;
	
	// Get product price
	Стр.Цена=Счет7.Цена;
	
	Стр.СтавкаНДС=Стр.Товар.СтавкаНДС;
	
	// Get tax value
	Стр.СуммаНДС=Счет7.НДС;	
	
	// Get product sum without tax
	Стр.СуммаБезНДС=Счет7.Сумма-Счет7.НДС;
	
	// Get product sum with tax
	Стр.СуммаСНДС=Счет7.Сумма;
	
	Если видСч="СчетCSP" Тогда
		Стр.Содержание="Доступ к облачным сервисам " + Стр.Товар.Наименование + " Период использования " + Формат(Счет7.ДатаНачалаИспольз,"ДФ=dd.MM.yyyy; ДЛФ=D") + " - " + Формат(Счет7.ДатаКонцаИспольз,"ДФ=dd.MM.yyyy; ДЛФ=D");	
	Иначе
		Стр.Содержание="";
	КонецЕсли;
	
	Стр.ВариантОбеспечения=Перечисления.ВариантыОбеспечения.Требуется;
	
	Стр.Обособленно=Истина;
	
КонецПроцедуры

// 5 Заказ Клиента
&НаСервере
функция СоздатьОбновитьЗаказыКлиентов(Дер)
	
	for each ТаблД in Дер.Строки do  
		
		Если СокрЛП(ТаблД.НомерДок)="" Тогда
			Продолжить;
		КонецЕсли;
		
		Счет8=ДобавитьОбновитьЗаказКлиента(ТаблД);
				
		ДобавитьСтрокиЗаказаКлиента(Счет8,ТаблД);  
			
		ДобавитьОбновитьСчетКлиенту(Счет8);	
		
	enddo; 
	
конецфункции

// 6 Заказ Клиента
&НаСервере
функция ДобавитьОбновитьЗаказКлиента(Табл)  
	
	//Ном=СтрЗаменить(Формат(Число(Прав(Табл.НомерДок,6)),"ЧЦ=6;ЧРГ=""*"""),"*","");
	Ном=ИзвлечьЦифры(Табл.НомерДок);
	
	Заказ8=Документы.ЗаказКлиента.НайтиПоНомеру(Ном,Табл.ДатаДок); 
		
	if ЗначениеЗаполнено(Заказ8.Номер) then 
	
		Заказ8=Заказ8.ПолучитьОбъект();
		
	else 
		
		Заказ8=Документы.ЗаказКлиента.СоздатьДокумент();
		
	endif;
		
	Заказ8.Номер=Ном; 
	
	Заказ8.Дата=Табл.ДатаДок;
	
	Заказ8.Партнер=Табл.Партнер;
	
	Заказ8.Контрагент=Табл.Контрагент;

	Заказ8.Организация=Табл.Организация;
	
	Заказ8.Соглашение = Табл.Соглашение;

	Заказ8.Валюта=Табл.Валюта; 
	
	Заказ8.Склад=Табл.Склад; 
	
	Заказ8.Менеджер=Табл.Менеджер;
	
	Заказ8.Статус=Табл.Статус;
	 
	Заказ8.ДатаСогласования=Табл.ДатаСогласования;
	
	Заказ8.Согласован=Табл.Согласован;
	
	Заказ8.БанковскийСчет=Табл.БанковскийСчет;
	
	Заказ8.АдресДоставки=Табл.АдресДоставки;
	
	Заказ8.НалогообложениеНДС=Табл.НалогообложениеНДС;
	
	Заказ8.ЦенаВключаетНДС=Табл.ЦенаВключаетНДС;
	
	Заказ8.ХозяйственнаяОперация=Табл.ХозяйственнаяОперация;
	
	Заказ8.Комментарий=Табл.Комментарий;

	Заказ8.Договор=Табл.Договор;
	
	Заказ8.Подразделение=Табл.Подразделение;
	
	Заказ8.Автор=Табл.Автор;
	
	Заказ8.ПорядокРасчетов=Табл.ПорядокРасчетов;
	
	Заказ8.СпособДоставки=Табл.СпособДоставки;
	
    Заказ8.КонтактноеЛицо=Табл.КонтактноеЛицо;
	
	Заказ8.Руководитель=Табл.Руководитель;
	
	Заказ8.Приоритет=Табл.Приоритет;
	
	Заказ8.АдресДоставкиЗначение=Табл.АдресДоставкиЗначение;
	
	return Заказ8;

конецфункции	//Новый Заказ Клиента 

// 7 Заказ Клиента
&НаСервере
Процедура ДобавитьСтрокиЗаказаКлиента(Счет8,Табл)
	 
	фБез=0;

	if Счет8.Проведен=1 then 		
		Счет8.Записать(РежимЗаписиДокумента.ОтменаПроведения);		
	endif;
	
	if Счет8.Товары.Количество()>0 then 		
		Message("Обновление счета "+Счет8.Номер+ " от "+Счет8.Дата,СтатусСообщения.Информация); 		
	else 		
		Message("Добавление счета "+Счет8.Номер+ " от "+Счет8.Дата,СтатусСообщения.Информация); 		
	endif; 
	
	Счет8.Товары.Очистить();
	
	//	Док.Услуги.Очистить();

	Проводить=1;
	
	for each СтрТ in Табл.Строки do
		
		if СтрТ.СуммаСНДС=0 then			
			Проводить=0;			
		endif;
		
		Номенклатура=СтрТ.Товар;  
		
		Стр=Счет8.Товары.Добавить();
			
		Стр.Номенклатура=СтрТ.Товар; 
				
		Стр.КоличествоУпаковок=СтрТ.КоличествоУпаковок;
		
		Стр.Количество=СтрТ.Количество; 
		
		Стр.Цена=СтрТ.Цена;
				
		Стр.СтавкаНДС=СтрТ.СтавкаНДС; 
		
		Стр.СуммаНДС=СтрТ.СуммаНДС; 
		
		Стр.ВариантОбеспечения=Перечисления.ВариантыОбеспечения.Требуется; 
		
		Стр.ДатаОтгрузки=Счет8.Дата+60*60*24*30;
		
		Стр.Сумма=СтрТ.СуммаБезНДС;
		
		Стр.СуммаСНДС=СтрТ.СуммаСНДС;
				
		Стр.Содержание=СтрТ.Содержание;
		
		Стр.ВариантОбеспечения=СтрТ.ВариантОбеспечения; 
		
		Стр.Склад=Справочники.Склады.НайтиПоНаименованию("Основной",Ложь);
		
		//Стр.Обособленно=СтрТ.Обособленно;
		
	enddo;
	
	if фБез=0 then
		
		if Проводить=0 then
			
			Счет8.Записать(РежимЗаписиДокумента.Запись);
			
			Message("*****Не проведён из-за нулевых сумм счет "+Счет8.Номер+ " от "+Счет8.Дата,СтатусСообщения.ОченьВажное);
			
		else
			
			try
				
				Счет8.Записать(РежимЗаписиДокумента.Проведение);	//,V8.РежимПроведенияДокумента.Неоперативный);
				
				Message("Записан заказ клиента "+Счет8.Номер+ " от "+Счет8.Дата,СтатусСообщения.Обычное); 	
				
			except
				
				Счет8.Записать(РежимЗаписиДокумента.Запись); 
				
				Message("Заказ клиента не проведен "+Счет8.Номер+ " от "+Счет8.Дата,СтатусСообщения.ОченьВажное);
				Сообщить(ОписаниеОшибки());
				
			endtry;  
			
		endif; 

	endif; 

КонецПроцедуры



// Счет клиенту на оплату========================================================================
&НаСервере
Процедура ДобавитьОбновитьСчетКлиенту(Счет8)
	
	// Получить заказы клиентов за выбранный интервал дат
	ЗаказКлиента=Счет8;
		
	// Создать счета клиентам		
	СчетКлиенту=Документы.СчетНаОплатуКлиенту.НайтиПоНомеру(ЗаказКлиента.Номер,ЗаказКлиента.Дата);
	
	Если ЗаказКлиента.Проведен Тогда
		
		Если Не СчетКлиенту.Пустая() Тогда
			СчетКлиенту=СчетКлиенту.ПолучитьОбъект(); 
		Иначе
			СчетКлиенту=Документы.СчетНаОплатуКлиенту.СоздатьДокумент(); 
			СчетКлиенту.ДокументОснование=ЗаказКлиента.Ссылка;
			СчетКлиенту.Номер=СокрЛП(ЗаказКлиента.Номер);		
			СчетКлиенту.Дата=ЗаказКлиента.Дата;	
		КонецЕсли;  
								
		СчетКлиенту.Организация=ЗаказКлиента.Организация;
		
		СчетКлиенту.СуммаДокумента=ЗаказКлиента.СуммаДокумента;
		
		СчетКлиенту.Валюта=ЗаказКлиента.Валюта;
		
		СчетКлиенту.ФормаОплаты=Перечисления.ФормыОплаты.Безналичная;
		
		СчетКлиенту.БанковскийСчет=ЗаказКлиента.БанковскийСчет;
		
		СчетКлиенту.Менеджер=ЗаказКлиента.Менеджер;
		
		СчетКлиенту.Партнер=ЗаказКлиента.Партнер;
		
		СчетКлиенту.Контрагент=ЗаказКлиента.Контрагент;
		
		СчетКлиенту.Комментарий=ЗаказКлиента.Комментарий;
		
		СчетКлиенту.Договор=ЗаказКлиента.Договор;
		
		СчетКлиенту.КонтактноеЛицо=ЗаказКлиента.КонтактноеЛицо;
		
		СчетКлиенту.Руководитель=ЗаказКлиента.Руководитель;
		
		СчетКлиенту.ГлавныйБухгалтер=ЗаказКлиента.ГлавныйБухгалтер;
		
		// Заполнение этапов оплаты
		Если СчетКлиенту.ЭтапыГрафикаОплаты.Количество()=0 Тогда
			этап1=СчетКлиенту.ЭтапыГрафикаОплаты.Добавить();
		Иначе
			этап1=СчетКлиенту.ЭтапыГрафикаОплаты.Получить(0); 
		КонецЕсли;
		
		Если ЗаказКлиента.Соглашение.Наименование="Оптовые продажи в кредит" Тогда
			этап1.ДатаПлатежа = Дата(СчетКлиенту.Дата+30*60*60*24);
		Иначе
			этап1.ДатаПлатежа = Дата(СчетКлиенту.Дата+3*60*60*24);
		КонецЕсли;
		
		этап1.ПроцентПлатежа=100;
		этап1.СуммаПлатежа=СчетКлиенту.СуммаДокумента;
		
		Попытка				
			СчетКлиенту.Записать(РежимЗаписиДокумента.Проведение); 
			Message("Счет на оплату клиенту записан или обновлен "+СчетКлиенту.Номер+ " от "+СчетКлиенту.Дата,СтатусСообщения.ОченьВажное); 			
		Исключение 
			СчетКлиенту.Записать();
			Message("Счет на оплату клиенту не проведён из-за исключительных обстоятельств счет "+СчетКлиенту.Номер+ " от "+СчетКлиенту.Дата,СтатусСообщения.ОченьВажное); 
		     Сообщить(ОписаниеОшибки());	
		КонецПопытки;
			
	КонецЕсли;
		
	//КонецЦикла;
	
КонецПроцедуры



 // Поступление безналичных денежных средств от клиента =================================================================
 &НаСервере
Процедура СоздатьОбновитьПриходыДенег(V7)   // Отключено, т.к. эту информацию можно автоматически выгрузить из банка 
	
	// Выбрать приходы денег на выбранный интервал дат 
	Попытка		
		 	ДокПриход7=V7.CreateObject("Документ.ПриходДенегНаСчет");		
	Исключение		
		Сообщить("не удалось открыть док ПриходДенегНаСчет в процедуре СоздатьОбновитьПриходДенег");		
	КонецПопытки;
	
	ДокПриход7.ВыбратьДокументы(Объект.Период.ДатаНачала,Объект.Период.ДатаОкончания);

	// Перебрать все приходы
	Пока ДокПриход7.ПолучитьДокумент()=1 Цикл
		
		// Пропустить не проведенные приходы денег
		Если ДокПриход7.Проведен()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Перебрать табличную часть документа прихода денег
		ДокПриход7.ВыбратьСтроки();
		Пока ДокПриход7.ПолучитьСтроку() Цикл
			
			// Получить ссчлку на счет
			Счет7=ДокПриход7.ПоСчету;
			
			// Отбрасчвать строчки в которых платеж не по счету 
			видСч=Счет7.Вид();
			Если Не СтрНайти(видСч,"Счет")=1 Тогда
				Продолжить;
			КонецЕсли;
			
			// Skip docs not having prepaid status
			if (Find(ДокПриход7.ВидПриходаРасхода.Наименование,"Предоплата")=0) 
				And (Find(ДокПриход7.ВидПриходаРасхода.Наименование,"Оплата за товар")=0) 
				And (Find(ДокПриход7.ВидПриходаРасхода.Наименование,"Выполнение работ")=0) 
				And (Find(ДокПриход7.ВидПриходаРасхода.Наименование,"Оплата CSP")=0) then
				continue;
			endif;
			
			//докНомер=СтрЗаменить(Формат(Число(Прав(Счет7.НомерДок,6)),"ЧЦ=6;ЧРГ=""*"""),"*","");
			докНомер=ИзвлечьЦифры(Счет7.НомерДок);
			
			докДата=Счет7.ДатаДок;
			
			// Проверить существует ли счет клиенту в 8-ке
			Счет8=Документы.СчетНаОплатуКлиенту.НайтиПоНомеру(докНомер,докДата);
			Если Счет8.Пустая() Тогда
				Продолжить;
			Иначе	
				Счет8=Счет8.ПолучитьОбъект();
			КонецЕсли; 
			Заказ8=Документы.ЗаказКлиента.НайтиПоНомеру(докНомер,докДата);
			
			//приходНомер7=ДокПриход7.НомерДок;
			//приходНомер7=СтрЗаменить(Формат(Число(Прав(приходНомер7,5)),"ЧЦ=6;ЧРГ=""*"""),"*","");
			приходНомер7=ИзвлечьЦифры(ДокПриход7.НомерДок);
			
			// Проверить, существует ли уже документ поступление безналичных денежных средстс в 8-ке 
			ДокПриход8=Документы.ПоступлениеБезналичныхДенежныхСредств.НайтиПоНомеру(приходНомер7,ДокПриход7.ДатаДок);
			// Создать заново, если документ не найден
			Если ДокПриход8.Пустая() Тогда
				ДокПриход8=Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
				ДокПриход8.Номер=СокрЛП(приходНомер7);
			    ДокПриход8.Дата=ДокПриход7.ДатаДок;	
			Иначе
				ДокПриход8=ДокПриход8.ПолучитьОбъект();
			КонецЕсли;
						
			// Заполнить/обновить данные в документе
			ДокПриход8.Организация=Счет8.Организация;
			
			ДокПриход8.БанковскийСчет=Счет8.БанковскийСчет;
			
			ДокПриход8.ТипПлатежногоДокумента=Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
			
			ДокПриход8.ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
			
			ДокПриход8.СуммаДокумента=Счет8.СуммаДокумента;
			
			ДокПриход8.Контрагент=Счет8.Контрагент;
			
			ДокПриход8.БанковскийСчетКонтрагента=Счет8.Договор.БанковскийСчетКонтрагента;
			
			ДокПриход8.ДатаВходящегоДокумента=ДокПриход7.ДатаПриходаДенег;
			
			ДокПриход8.НомерВходящегоДокумента=ДокПриход7.НомерПлатежки;
			
			ДокПриход8.НазначениеПлатежа=ДокПриход7.ВидПриходаРасхода.Наименование;
			
			ДокПриход8.Валюта=Счет8.Валюта;
			
			ДокПриход8.Комментарий=Счет8.Комментарий;
			
			ДокПриход8.КурсКонвертации=ДокПриход7.Курс;
						
			ДокПриход8.Подразделение=Справочники.СтруктураПредприятия.НайтиПоНаименованию("Основное",Ложь);
			
			ДокПриход8.ПроведеноБанком=Истина;
			
			ДокПриход8.ДатаПроведенияБанком=ДокПриход7.ДатаПриходаДенег;
			
			ДокПриход8.ДокументОснование=Счет8.Ссылка;  
			
			ДокПриход8.ИмяКонтрагента=Счет8.Контрагент.Наименование;
			
			ДокПриход8.Договор=Счет8.Договор;
			
			ДокПриход8.Ответственный=Справочники.Пользователи.НайтиПоНаименованию(ДокПриход7.Автор.ФИО,Ложь);
			
			ДокПриход8.Партнер=Счет8.Партнер; 
			
			ДокПриход8.ОтражатьКомиссию=Ложь;
			
			//ДокПриход8.Исправление=Ложь;
			
			налог=СокрЛП(ДокПриход7.НДС);
			Если налог="0" Или налог="Без НДС" Тогда
				ДокПриход8.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			Иначе
				ДокПриход8.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			КонецЕсли;
			
			// Перезаполняем расшифровку платежа
			ДокПриход8.РасшифровкаПлатежа.Очистить();
			рп=ДокПриход8.РасшифровкаПлатежа.Добавить();
			
			рп.Партнер=Счет8.Партнер;
			
			рп.ОснованиеПлатежа=Счет8;
			
			рп.Сумма=Счет8.СуммаДокумента;
			
			рп.ВалютаВзаиморасчетов=Счет8.Валюта;
			
			рп.СуммаВзаиморасчетов=Счет8.СуммаДокумента; 
			
			рп.СтатьяДоходов=Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
			
			рп.Подразделение=Заказ8.Подразделение;
			
			рп.Организация=Счет8.Организация;
			
			рп.ОбъектРасчетов=Заказ8;
			
			Если налог="0" Тогда
				рп.СтавкаНДС=Перечисления.СтавкиНДС.НДС0;
				рп.СуммаНДС=0;
			ИначеЕсли налог="Без НДС" Тогда
				рп.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
				рп.СуммаНДС=0;
			ИначеЕсли налог="10" Тогда
				рп.СтавкаН=Перечисления.СтавкиНДС.НДС10;
				рп.СуммаНДС=Счет8.СуммаДокумента*10/110
			ИначеЕсли налог="18" Тогда
				рп.СтавкаНДС=Перечисления.СтавкиНДС.НДС18;
				рп.СуммаНДС=Счет8.СуммаДокумента*18/118;
			ИначеЕсли налог="20" Тогда
				рп.СтавкаНДС=Перечисления.СтавкиНДС.НДС20;
				рп.СуммаНДС=Счет8.СуммаДокумента*20/120;
			КонецЕсли;
								
			Попытка                                                                         
				ДокПриход8.Записать(РежимЗаписиДокумента.Проведение);
				Message("Записан документ Поступление безналичных денежных средств п/п: " + ДокПриход8.Номер + " от " + ДокПриход8.Дата);
			Исключение  
				ДокПриход8.Записать();
				Message("Ошибка при проведении документа Поступление безналичных денежных средств п/п: " + ДокПриход7.НомерПлатежки + " от " + ДокПриход7.ДатаПриходаДенег);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		                                                                                       
	КонецЦикла;
	
	
КонецПроцедуры



// 1 Заказ Поставщику================================================================
&НаСервере
функция ПолучитьТаблицуЗаказовПоставщикам(V7);

	// Создать структуру данных для заказов поставщикам
	Табл=СформироватьСтолбцыТаблицыЗаказовПоставщикам();
	
	// Получить список пришедших платежей 
	ДокПриход=ПолучитьДокументыПрихода(V7); 
	
	// Перебрать список платежей
	Пока ДокПриход.ПолучитьДокумент()=1 Цикл
		
		Если ДокПриход.Проведен()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокПриход.ВыбратьСтроки();
		
		Пока ДокПриход.ПолучитьСтроку() Цикл
			
			Счет7=ДокПриход.ПоСчету;
			
			видСч=Счет7.Вид();
			Если Не СтрНайти(видСч,"Счет")=1 Тогда
				Продолжить;
			КонецЕсли;
			
			//Если Не СтрНайти(ДокПриход.ВидПриходаРасхода.Наименование,"Предоплата") Тогда
			//	Продолжить;
			//КонецЕсли;
			
			// Skip docs not having prepaid status
			if (Find(ДокПриход.ВидПриходаРасхода.Наименование,"Предоплата")=0) 
				And (Find(ДокПриход.ВидПриходаРасхода.Наименование,"Оплата за товар")=0) 
				And (Find(ДокПриход.ВидПриходаРасхода.Наименование,"Выполнение работ")=0) 
				And (Find(ДокПриход.ВидПриходаРасхода.Наименование,"Оплата CSP")=0) then
				continue;
			endif;
			
			ЗаказПоставщику7=V7.CreateObject("Документ.Заказ");
			
			//ЗаказПоставщику7.ВыбратьДокументы(Объект.Период.ДатаНачала,ТекущаяДата());   
			ЗаказПоставщику7.ВыбратьДокументы(Счет7.ДатаДок,ТекущаяДата());

			
			//заказНайден=0; 
			
			Пока ЗаказПоставщику7.ПолучитьДокумент()=1 Цикл
				
				Если (ЗаказПоставщику7.СчетОснование.НомерДок=Счет7.НомерДок) 
					И (ЗаказПоставщику7.СчетОснование.ДатаДок=Счет7.ДатаДок)  Тогда
					
					Если ЗаказПоставщику7.ПометкаУдаления()=1 Тогда
						Продолжить;
					КонецЕсли; 
					 
					СтрДок=Табл.Строки.Добавить();
			
					// Заполнить данные из шапки заказа поставщику
					ЗаполнитьЗаказПоставщикуВДерЗнач(СтрДок,ЗаказПоставщику7,V7,Счет7);
			
					// Заполнить данны из табличной части заказа поставщику
            		ЗаказПоставщику7.ВыбратьСтроки();
			
					Пока ЗаказПоставщику7.ПолучитьСтроку()=1 Цикл
				
						Стр=СтрДок.Строки.Добавить();
				
						ЗаполнитьТоварнуюПозициюВЗаказеПоставщикуВДерЗнач(Стр,ЗаказПоставщику7,видСч);
				
					КонецЦикла
					 
					 //Прервать;
				 КонецЕсли;
				 
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Табл;
	
конецфункции

// 2 Заказ Поставщику
&НаСервере
функция СформироватьСтолбцыТаблицыЗаказовПоставщикам()
	
	Табл=Новый ДеревоЗначений;  
	
	Табл.Колонки.Добавить("НомерДок");  
	Табл.Колонки.Добавить("ДатаДок");
	Табл.Колонки.Добавить("Партнер");
	Табл.Колонки.Добавить("Контрагент");
	Табл.Колонки.Добавить("Организация");
	Табл.Колонки.Добавить("Соглашение"); 	//?
	Табл.Колонки.Добавить("Склад");	
	Табл.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Табл.Колонки.Добавить("Менеджер");
	Табл.Колонки.Добавить("ЦенаВключаетНДС");
	Табл.Колонки.Добавить("Статус");
	Табл.Колонки.Добавить("СуммаДокумента");
	Табл.Колонки.Добавить("ДополнительнаяИнформация");
	Табл.Колонки.Добавить("Согласован");
	Табл.Колонки.Добавить("ФормаОплаты");
	Табл.Колонки.Добавить("БанковскийСчет");
	Табл.Колонки.Добавить("ДатаПервогоПоступления");
	Табл.Колонки.Добавить("ДатаСогласования");
	Табл.Колонки.Добавить("НалогообложениеНДС"); 
	Табл.Колонки.Добавить("ХозяйственнаяОперация");
	Табл.Колонки.Добавить("Комментарий"); 
	Табл.Колонки.Добавить("НомерПоДаннымПоставщика"); 
	Табл.Колонки.Добавить("ДатаПоДаннымПоставщика");
	Табл.Колонки.Добавить("Подразделение");
	//Табл.Колонки.Добавить("ГруппаФинансовогоУчета");
	//Табл.Колонки.Добавить("Договор");
    Табл.Колонки.Добавить("Автор");
	Табл.Колонки.Добавить("ДокументОснование");
	Табл.Колонки.Добавить("Приоритет");
	Табл.Колонки.Добавить("ПорядокРасчетов");
	Табл.Колонки.Добавить("АдресДоставки");	
	Табл.Колонки.Добавить("ДополнительнаяИнформацияПоДоставке");

	Табл.Колонки.Добавить("Товар");
   	Табл.Колонки.Добавить("КоличествоУпаковок");
	Табл.Колонки.Добавить("Количество");
    Табл.Колонки.Добавить("Цена");
	Табл.Колонки.Добавить("СтавкаНДС");
	Табл.Колонки.Добавить("СуммаНДС");
	Табл.Колонки.Добавить("СуммаБезНДС");
	Табл.Колонки.Добавить("СуммаСНДС");
  	//Табл.Колонки.Добавить("Содержание"); 		// CSP	
	
	Возврат Табл;
	
конецфункции

// 3 Заказ Поставщику
&НаСервере
процедура ЗаполнитьЗаказПоставщикуВДерЗнач(СтрДок,ЗаказПоставщику7,V7,Счет7)
	
	СтрДок.НомерДок=ИзвлечьЦифры(ЗаказПоставщику7.НомерДок);
	
	СтрДок.ДатаДок=ЗаказПоставщику7.ДатаДок;
	
	СтрДок.Партнер=ДобавитьОбновитьПартнера8(ЗаказПоставщику7);
	
	ДобавитьОбновитьКонтактыПартнера(ЗаказПоставщику7,V7);
	
	СтрДок.Контрагент=ДобавитьОбновитьКонтрагента8(ЗаказПоставщику7);
	
	ДобавитьОбновитьКонтактыКонтрагента(ЗаказПоставщику7,V7);
		
	СтрДок.Организация=Справочники.Организации.НайтиПоНаименованию("АЛВ ГРУП ООО");
	
	// Соглашение с поставщиком?
	
	СтрДок.Склад=Справочники.Склады.НайтиПоНаименованию("Основной");
	
	СтрДок.Валюта=Справочники.Валюты.НайтиПоКоду(ЗаказПоставщику7.Валюта.КодЦифровой);
	
	СтрДок.Менеджер=Справочники.Пользователи.НайтиПоНаименованию(ЗаказПоставщику7.Автор.ФИО,Ложь);
	
	Если СокрЛП(Счет7.ЕстьНДС)="Да" Тогда          
		СтрДок.ЦенаВключаетНДС=Истина;
	Иначе
		СтрДок.ЦенаВключаетНДС=Ложь;
	КонецЕсли;
	
	Если ЗаказПоставщику7.Закрыта=1 Тогда
		СтрДок.Статус=Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
	Иначе
		СтрДок.Статус=Перечисления.СтатусыЗаказовПоставщикам.Согласован;
	КонецЕсли;
	
	СтрДок.СуммаДокумента=ЗаказПоставщику7.СуммаОплаты;
	
	СтрДок.ДополнительнаяИнформация=СокрЛП(ЗаказПоставщику7.КомКЗаказу);
	
	СтрДок.Согласован=Истина;
	
	СтрДок.ФормаОплаты=Перечисления.ФормыОплаты.Безналичная;
	
	СтрДок.БанковскийСчет=Справочники.БанковскиеСчетаОрганизаций.НайтиПоРеквизиту("НомерСчета","40702810902800000113");
	
	СтрДок.ДатаПервогоПоступления=ЗаказПоставщику7.ДатаОплаты;
	
	СтрДок.ДатаСогласования=ЗаказПоставщику7.ДатаДок;
	
	Если СокрЛП(Счет7.ЕстьНДС)="Да" Тогда
		СтрДок.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		СтрДок.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС; 
	КонецЕсли;
	
	СтрДок.ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;	
	
	СтрДок.Комментарий=СокрЛП(ЗаказПоставщику7.ОбщКоммент);
	
	СтрДок.НомерПоДаннымПоставщика=СокрЛП(ЗаказПоставщику7.НомерСчетаПост); 
	
	СтрДок.ДатаПоДаннымПоставщика=ЗаказПоставщику7.ДатаСчетаПост; 
	
	ДобавитьОбновитьБанковскиеСчета(ЗаказПоставщику7,V7);
	
	СтрДок.Подразделение=Справочники.СтруктураПредприятия.НайтиПоНаименованию("Основное подразделение",Ложь);
	
	//СтрДок.ГруппаФинансовогоУчета=Справочники.ГруппыФинансовогоУчетаДоходовРасходов
	
	//СтрДок.Договор=ДобавитьОбновитьДоговор8(Счет7);
	
	СтрДок.Автор=Справочники.Пользователи.НайтиПоНаименованию(ЗаказПоставщику7.Автор.ФИО,Ложь);
	
	СтрДок.Приоритет=Справочники.Приоритеты.НайтиПоНаименованию("Средний",Ложь);
	
	//Ном=СтрЗаменить(Формат(Число(Прав(Счет7.НомерДок,6)),"ЧЦ=6;ЧРГ=""*"""),"*","");
	Ном=ИзвлечьЦифры(Счет7.НомерДок);
	
	ЗаказКлиента8=Документы.ЗаказКлиента.НайтиПоНомеру(Ном,Счет7.ДатаДок);
	
	СтрДок.ДокументОснование=ЗаказКлиента8.Ссылка;
	
	СтрДок.ПорядокРасчетов=Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;	
	
	СтрДок.АдресДоставки=СокрЛП(ЗаказПоставщику7.АдресСклада.Адрес);
	
	допИнфоПоДоставке="";
	
	Если ЗаказПоставщику7.АдресСклада.ЗаМКАД.Идентификатор()="Да" Тогда
		допИнфоПоДоставке="Склад находится за МКАД ";
	КонецЕсли;
	
	Если СокрЛП(ЗаказПоставщику7.АдресСклада.Ответственный) <> "" Тогда
		допИнфоПоДоставке=допИнфоПоДоставке+" Ответственный: "+СокрЛП(ЗаказПоставщику7.АдресСклада.Ответственный);
	КонецЕсли;
	
	Если СокрЛП(ЗаказПоставщику7.АдресСклада.Телефон) <> "" Тогда
		допИнфоПоДоставке=допИнфоПоДоставке+" Телефон: "+СокрЛП(ЗаказПоставщику7.АдресСклада.Телефон);
	КонецЕсли; 
	
	Если СокрЛП(ЗаказПоставщику7.АдресСклада.Адрес) <> "" Тогда
		допИнфоПоДоставке=допИнфоПоДоставке+" Адрес: "+СокрЛП(ЗаказПоставщику7.АдресСклада.Адрес);
	КонецЕсли; 
	
	Если СокрЛП(ЗаказПоставщику7.АдресСклада.КоордСклд) <> "" Тогда
		допИнфоПоДоставке=допИнфоПоДоставке+" Координаты склада: "+СокрЛП(ЗаказПоставщику7.АдресСклада.КоордСклд);
	КонецЕсли;
	
	Если СокрЛП(ЗаказПоставщику7.АдресСклада.МетроСкл.Наименование) <> "" Тогда
		допИнфоПоДоставке=допИнфоПоДоставке+" Метро склада: "+СокрЛП(ЗаказПоставщику7.АдресСклада.МетроСкл.Наименование);
	КонецЕсли;
	
	СтрДок.ДополнительнаяИнформацияПоДоставке=допИнфоПоДоставке;	
	
конецпроцедуры                                  

// 4 Заказ Поставщику
&НаСервере
процедура ЗаполнитьТоварнуюПозициюВЗаказеПоставщикуВДерЗнач(Стр,ЗаказПоставщику7,видСч)
	
	Стр.Товар=ДобавитьОбновитьТовар(ЗаказПоставщику7.Товар,видСч);
	
	Стр.КоличествоУпаковок=1;
	
	Стр.Количество=ЗаказПоставщику7.Количество*ЗаказПоставщику7.Коэффициент;
	
	Стр.Цена=ЗаказПоставщику7.Цена;
	
	Стр.СтавкаНДС=Стр.Товар.СтавкаНДС;
	
	Стр.СуммаНДС=ЗаказПоставщику7.НДС;
	
	Стр.СуммаБезНДС=ЗаказПоставщику7.Сумма-ЗаказПоставщику7.НДС;
	
	Стр.СуммаСНДС=ЗаказПоставщику7.Сумма;
	
	Если видСч="СчетCSP" Тогда
		Стр.Содержание="Доступ к облачным сервисам "+Стр.Товар.Наименование+ " Период использования " + Формат(ЗаказПоставщику7.ДатаНачалаИспольз,"ДФ=dd.MM.yyyy; ДЛФ=D") + " - " + Формат(ЗаказПоставщику7.ДатаКонцаИспольз,"ДФ=dd.MM.yyyy; ДЛФ=D");	
	КонецЕсли;
	
	
конецпроцедуры

// 5 Заказ Поставщику
&НаСервере
функция СоздатьОбновитьЗазазыПоставщикам(Дер, V7)
	
	for each ТаблД in Дер.Строки do  
		
		Если СокрЛП(ТаблД.НомерДок)="" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаказПоставщику8=ДобавитьОбновитьЗаказПоставщику(ТаблД);
				
		ДобавитьСтрокиЗаказаПоставщику(ЗаказПоставщику8,ТаблД); 
		
		Если ПереносПлатежек Тогда
			ДобавитьОбновитьОплатуПоставщику(ЗаказПоставщику8, V7)
		КонецЕсли;
		
	enddo; 
	
конецфункции

// 6 Заказ Поставщику
&НаСервере
функция ДобавитьОбновитьЗаказПоставщику(Табл)
	
	Ном=Табл.НомерДок;
	
	ЗаказПоставщику8=Документы.ЗаказПоставщику.НайтиПоНомеру(Ном,Табл.ДатаДок);
	
	Если ЗначениеЗаполнено(ЗаказПоставщику8.Номер) Тогда
		ЗаказПоставщику8=ЗаказПоставщику8.ПолучитьОбъект();
	Иначе
		ЗаказПоставщику8=Документы.ЗаказПоставщику.СоздатьДокумент();
	КонецЕсли;
	
	ЗаказПоставщику8.Номер=Ном;
	
	ЗаказПоставщику8.Дата=Табл.ДатаДок;
	
	ЗаказПоставщику8.Партнер=Табл.Партнер;
	
	ЗаказПоставщику8.Контрагент=Табл.Контрагент;
	
	ЗаказПоставщику8.Организация=Табл.Организация;
	
	ЗаказПоставщику8.Склад=Справочники.Склады.НайтиПоНаименованию("Основной",Ложь);
	
	ЗаказПоставщику8.Валюта=Табл.Валюта;
	
	ЗаказПоставщику8.Менеджер=Табл.Менеджер;
	
	ЗаказПоставщику8.ЦенаВключаетНДС=Табл.ЦенаВключаетНДС;
	
	ЗаказПоставщику8.Статус=Табл.Статус;
	
	ЗаказПоставщику8.СуммаДокумента=Табл.СуммаДокумента;
	
	ЗаказПоставщику8.ДополнительнаяИнформация=Табл.ДополнительнаяИнформация;
	
	ЗаказПоставщику8.Согласован=Табл.Согласован;
	
	ЗаказПоставщику8.ФормаОплаты=Табл.ФормаОплаты;
	
	ЗаказПоставщику8.БанковскийСчет=Табл.БанковскийСчет;
	
	ЗаказПоставщику8.ДатаПервогоПоступления=Табл.ДатаПервогоПоступления;
	
	ЗаказПоставщику8.ДатаСогласования=Табл.ДатаСогласования;
	
	ЗаказПоставщику8.НалогообложениеНДС=Табл.НалогообложениеНДС;
	
	ЗаказПоставщику8.ХозяйственнаяОперация=Табл.ХозяйственнаяОперация;
	
	ЗаказПоставщику8.Комментарий=Табл.Комментарий;
	
	ЗаказПоставщику8.НомерПоДаннымПоставщика=Табл.НомерПоДаннымПоставщика;
	
	ЗаказПоставщику8.Подразделение=Табл.Подразделение;
	
	ЗаказПоставщику8.Автор=Табл.Автор;
	
	ЗаказПоставщику8.ДокументОснование=Табл.ДокументОснование.Ссылка;
	
	ЗаказПоставщику8.Приоритет=Табл.Приоритет;
	
	ЗаказПоставщику8.АдресДоставки=Табл.АдресДоставки;
	
	ЗаказПоставщику8.ДополнительнаяИнформацияПоДоставке=Табл.ДополнительнаяИнформацияПоДоставке;
	
	Возврат ЗаказПоставщику8;	
	
конецфункции

// 7 Заказ Поставщику
 &НаСервере
процедура ДобавитьСтрокиЗаказаПоставщику(ЗаказПоставщику8,ТаблД)
	
	Если ЗаказПоставщику8.Проведен=1 Тогда
		ЗаказПоставщику8.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	Если ЗаказПоставщику8.Товары.Количество()>0 Тогда
		Сообщить("Обновление заказа поставщику "+ТаблД.НомерДок+" от "+ТаблД.ДатаДок,СтатусСообщения.Информация);
	Иначе 
		Сообщить("Добавление заказа поставщику "+ТаблД.НомерДок+" от "+ТаблД.ДатаДок,СтатусСообщения.Информация);
	КонецЕсли; 
	
	ЗаказПоставщику8.Товары.Очистить();
	
	Проводить=1;
	
	Для Каждого СтрТ Из ТаблД.Строки Цикл
		
		Если СтрТ.СуммаСНДС=0 Тогда
			Проводить=0;
		КонецЕсли;
		
		Номенклатура=СтрТ.Товар;
		
		Стр=ЗаказПоставщику8.Товары.Добавить();
		
		Стр.Номенклатура=СтрТ.Товар;
		
		Стр.КоличествоУпаковок=СтрТ.КоличествоУпаковок;
		
		Стр.Количество=СтрТ.Количество;
		
		Стр.Цена=СтрТ.Цена;
		
		Стр.СтавкаНДС=СтрТ.СтавкаНДС;
		
		Стр.СуммаНДС=СтрТ.СуммаНДС;
		
		Стр.Сумма=СтрТ.СуммаБезНДС;
		
		Стр.СуммаСНДС=СтрТ.СуммаСНДС;
		
		//Стр.Содержание=СтрТ.Содержание;
		
	КонецЦикла;
	
	Если Проводить=0 Тогда
		ЗаказПоставщику8.Записать(РежимЗаписиДокумента.Запись);
		Сообщить("*****Заказ поставщику не проведён из-за нулевых сумм "+ЗаказПоставщику8.Номер+ " от "+ЗаказПоставщику8.Дата,СтатусСообщения.ОченьВажное);
	Иначе
		Попытка
			ЗаказПоставщику8.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("*****Заказ поставщику записан "+ЗаказПоставщику8.Номер+ " от "+ЗаказПоставщику8.Дата,СтатусСообщения.Информация);
		Исключение
			ЗаказПоставщику8.Записать(РежимЗаписиДокумента.Запись); 
			Сообщить("*****Заказ поставщику не проведён из-за ошибки при записи "+ЗаказПоставщику8.Номер+ " от "+ЗаказПоставщику8.Дата,СтатусСообщения.ОченьВажное);
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;
	
конецпроцедуры

// Оплата поставщику
процедура ДобавитьОбновитьОплатуПоставщику(ЗаказПоставщику8, V7) 
		
	// Получить плтатежики7
	Попытка 
		Платежка7=V7.CreateObject("Документ.Платежка");
	Исключение
		Сообщить("Не удалось открыть документ Платежка в процедуре ДобавитьОбновитьОплатуПоставщику");
	КонецПопытки;
	
	Платежка7.ВыбратьДокументы(ЗаказПоставщику8.Дата,ТекущаяДата());      
	
	// Найти платежку по номеру и дате документа основания (заказа поставщику)
	нашли = 0;
	Пока Платежка7.ПолучитьДокумент()=1 Цикл 
		
		//Если (Найти(Платежка7.ДокументОснование.НомерДок, СокрЛП(ЗаказПоставщику8.Номер)) <> 0)  
		Если (ИзвлечьЦифры(Платежка7.ДокументОснование.НомерДок)=СокрЛП(ЗаказПоставщику8.Номер))
			И (Платежка7.ДокументОснование.ДатаДок = ЗаказПоставщику8.Дата) Тогда

			нашли = 1;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если нашли = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем существует ли уже такая платежка в 8-ке 
	
	//платежкаНомер7=СтрЗаменить(Формат(Число(Прав(Платежка7.НомерДок,5)),"ЧЦ=6;ЧРГ=""*"""),"*",""); 	
	платежкаНомер7=ИзвлечьЦифры(Платежка7.НомерДок);
	
	платежкаДата7=Платежка7.ДатаДок;	
	
	Платежка8=Документы.СписаниеБезналичныхДенежныхСредств.НайтиПоНомеру(платежкаНомер7,платежкаДата7);
	
	Если Платежка8.Пустая() Тогда
		Платежка8=Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
		Платежка8.Номер=СокрЛП(платежкаНомер7);
		Платежка8.Дата=платежкаДата7;
	Иначе
		Платежка8=Платежка8.ПолучитьОбъект();
	КонецЕсли;
	
	// Заполняем платежку
	Платежка8.ДатаВходящегоДокумента=платежкаДата7;
	                                                                         
	Платежка8.Контрагент=ЗаказПоставщику8.Контрагент;  
	
	Платежка8.НазначениеПлатежа=Платежка7.ВидПриходаРасхода.Наименование;
	
	Платежка8.ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	
	Платежка8.НомерВходящегоДокумента=платежкаНомер7;
	
	Платежка8.Организация=Справочники.Организации.НайтиПоНаименованию("АЛВ ГРУП ООО"); 
	
	Платежка8.БанковскийСчет=Справочники.БанковскиеСчетаОрганизаций.НайтиПоРеквизиту("НомерСчета","40702810902800000113");
	
	Платежка8.ОчередностьПлатежа=5;
	
	Выборка=Справочники.БанковскиеСчетаКонтрагентов.Выбрать(,ЗаказПоставщику8.Контрагент);
	Пока Выборка.Следующий() Цикл 
		Платежка8.БанковскийСчетКонтрагента=Выборка.ПолучитьОбъект().Ссылка;  
		Платежка8.БанковскийСчетПолучатель=Выборка.ПолучитьОбъект().Ссылка; 
	КонецЦикла;
			
	Платежка8.ПодотчетноеЛицо=Справочники.Пользователи.НайтиПоНаименованию(платежка7.Автор.ФИО,Ложь);
	
	Платежка8.СуммаДокумента=Платежка7.Сумма;
	
	Платежка8.Валюта=Справочники.Валюты.НайтиПоКоду(Платежка7.Валюта.КодЦифровой,Ложь); 
			
	Платежка8.ПеречислениеВБюджет=Ложь;
	
	Платежка8.Комментарий=Платежка7.Примечание;
	
	Платежка8.НеКонтролироватьЗаполнениеЗаявки=Ложь;
	
	Платежка8.ТипПлатежногоДокумента=Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
	
	Платежка8.ОплатаПоЗаявкам=Ложь; 
	
	Платежка8.ПроводкиПоРаботникам=Ложь;
	
	Платежка8.ДокументОснование=ЗаказПоставщику8.Ссылка;  
	
	Платежка8.ПроведеноБанком=Истина;
	
	Платежка8.ДатаПроведенияБанком=платежкаДата7;
	
	Платежка8.ПлатежиПо275ФЗ=Ложь;
	
	Платежка8.ДоговорСУчастникомГОЗ=Ложь; 
	
	Платежка8.НДФЛПоВедомостям=Ложь; 
	
	Платежка8.Ответственный=Справочники.Пользователи.НайтиПоНаименованию(платежка7.Автор.ФИО,Ложь);

	Платежка8.Партнер=ЗаказПоставщику8.Партнер;
	
	Платежка8.Автор=Справочники.Пользователи.НайтиПоНаименованию(платежка7.Автор.ФИО,Ложь);
	
	Платежка8.ОтражатьКомиссию=Ложь;
	
	//Платежка8.Исправление=Ложь;
	
	//Платежка8.ПеречислениеСотрудникуЧерезБанк=Ложь;
	
	Платежка8.РасшифровкаПлатежа.Очистить();
	
	рп=Платежка8.РасшифровкаПлатежа.Добавить();
	
	рп.Партнер=ЗаказПоставщику8.Партнер;
	
	рп.Сумма=Платежка7.Сумма;
	
	рп.ВалютаВзаиморасчетов=Платежка7.Валюта.Сокр_Назв;
	
	рп.СуммаВзаиморасчетов=Платежка7.Сумма;
	
	рп.Организация=Справочники.Организации.НайтиПоНаименованию("АЛВ ГРУП ООО");
	
	рп.СтавкаНДС=(Платежка7.НДС * 100) / (Платежка7.Сумма - Платежка7.НДС);
	
	рп.СуммаНДС=Платежка7.НДС;
	
	Попытка
		Платежка8.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Записана платежка " + Платежка8.Номер + " от " + Платежка8.Дата);
	Исключение
		Платежка8.Записать();
		Сообщить("Ошибка при проведении платежки " + Платежка8.Номер + " от " + Платежка8.Дата);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
		
конецпроцедуры



// Вспомогательные функции/процедуры=====================================================
&НаСервере
функция ДобавитьОбновитьДоговор8(Док)
	
	СпрДог7 = Док.Договор;
	СпрКл7 = Док.Клиент;
	
	СпрДог8 = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	*
	|ИЗ 
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент.Наименование = &Наименование
	|	И ДоговорыКонтрагентов.Номер = &Номер
	|	И ДоговорыКонтрагентов.Дата = &Дата";
	
	Запрос.УстановитьПараметр("Наименование", СпрКл7.Наименование);
	Если СокрЛП(СпрДог7.НомДоговора)="" Тогда 
		Запрос.УстановитьПараметр("Номер", "Б/Н");
    Иначе
		Запрос.УстановитьПараметр("Номер", СпрДог7.НомДоговора);
    КонецЕсли;
	Запрос.УстановитьПараметр("Дата", СпрДог7.ДатаДоговора);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Дог8 = Выборка.Ссылка.ПолучитьОбъект();
	Иначе	
		Дог8=Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		
		Если ЗначениеЗаполнено(СпрДог7.НомДоговора) Тогда
			Дог8.Номер=СпрДог7.НомДоговора;
		Иначе
			Дог8.Номер="Б/Н";
		КонецЕсли;
		
		Дог8.Дата=СпрДог7.ДатаДоговора; 
		
	КонецЕсли;
		
	Дог8.Организация=Справочники.Организации.НайтиПоНаименованию("АЛВ ГРУП ООО");
	
	Дог8.БанковскийСчет=Справочники.БанковскиеСчетаОрганизаций.НайтиПоРеквизиту("НомерСчета","40702810902800000113");
	
	Дог8.Наименование=СпрДог7.ТипДоговора.Идентификатор()+" № "+?(ЗначениеЗаполнено(СпрДог7.НомДоговора),СокрЛП(СпрДог7.НомДоговора),"Б/Н")+" от "+СпрДог7.ДатаДоговора;
	
	Дог8.Контрагент=Справочники.Контрагенты.НайтиПоНаименованию(СпрКл7.Наименование,Ложь);
	
	Дог8.Партнер=Справочники.Партнеры.НайтиПоНаименованию(СпрКл7.Наименование,Ложь);
	
	Дог8.Менеджер=Справочники.Пользователи.НайтиПоНаименованию(СпрДог7.Менеджер.ФИО,Ложь); 
	
	// Реальный статус в примечаниях
	догКоммент="";
	Дог8.Статус=Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	Если НЕ (СпрДог7.Статус.Идентификатор()="Действует") Тогда
		догКоммент="Реальный статус: "+СпрДог7.Статус.Идентификатор()+" ";
	КонецЕсли;
	
	// Реальные даты в примечаниях
	Если СпрДог7.ДатаНачала < Док.ДатаДок Тогда
		Дог8.ДатаНачалаДействия = СпрДог7.ДатаНачала;
	Иначе
		Дог8.ДатаНачалаДействия = '20200101000000';
		догКоммент=догКоммент+"Реальная дата начала действия договора: "+СпрДог7.ДатаНачала+" ";	
	КонецЕсли;

	Если СпрДог7.ДатаОконч > Док.ДатаДок Тогда
		Дог8.ДатаОкончанияДействия = СпрДог7.ДатаОконч;
	Иначе
		Дог8.ДатаОкончанияДействия='20221231000000'; 
		догКоммент=догКоммент+"Реальная дата окончания действия договора: "+СпрДог7.ДатаОконч+" ";
	КонецЕсли;  
	
	Если СпрДог7.ДатаДоговора > Док.ДатаДок ИЛИ НЕ ЗначениеЗаполнено(СпрДог7.ДатаДоговора) Тогда
		Дог8.Дата=Дог8.ДатаНачалаДействия;
		догКоммент=догКоммент+"Реальная дата договора: "+СпрДог7.ДатаДоговора+" ";
	КонецЕсли;
	
	Если СпрДог7.Подписан.Идентификатор()<>"Да" Тогда
		догКоммент=догКоммент+"На самом деле договор не подписан ";
	КонецЕсли;
	
	Дог8.Согласован=Истина;	
	
	Дог8.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(Док.Валюта.КодЦифровой);  
	
	Дог8.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем; 
	
	Дог8.НалогообложениеНДСОпределяетсяВДокументе = Истина;
	
	Если СпрДог7.ТипДоговора="ГосКонтракт" Тогда
		Дог8.ГосударственныйКонтракт=СпрДог7.НомДоговора;
	КонецЕсли;
	
	// Реальные характеристики договора
	Дог8.Комментарий = догКоммент;
	
	Дог8.Записать();
	
	return Дог8.Ссылка;
	
конецфункции

&НаСервере
функция ДобавитьОбновитьПартнера8(Счет7)
	
	ИНН=Счет7.Клиент.ИннКл;
	
	Если СтрНайти(Счет7.Вид(),"Счет")=1 Тогда
		Спр7=Счет7.Клиент;
	Иначе
		Спр7=Счет7.Поставщик;
	КонецЕсли;
	
	Организация=Справочники.Организации.НайтиПоНаименованию("АЛВ ГРУП ООО");
	
	Спр=Справочники.Партнеры.НайтиПоНаименованию(Спр7.Наименование,Истина);	
	
	Если Спр.Пустая() Тогда
		
		Спр8=Справочники.Партнеры.СоздатьЭлемент();
		
		//Группа=НайтиГруппу1(Справочники.Партнеры,Спр7);
		
		//Спр8.Родитель=Группа;
		
		Сообщить("Добавлен партнер "+Спр7.Наименование);
		
	Иначе
		
		Спр8=Спр.ПолучитьОбъект();
		
		Сообщить("Обновлен партнер "+Спр7.Наименование);
		
	КонецЕсли;
	
	Спр8.Наименование=Спр7.Наименование;
	
	Спр8.НаименованиеПолное=Спр7.НазваниеПолное.Получить(Объект.Период.ДатаОкончания); 

	Спр8.ОсновнойМенеджер=Справочники.Пользователи.НайтиПоНаименованию(Счет7.Автор.ФИО,Ложь);
	
	Если СтрНайти(Счет7.Вид(),"Счет")=1 Тогда
		Спр8.Клиент="Да";
	КонецЕсли;
	Если СтрНайти(Счет7.Вид(),"Заказ")=1 Тогда
		Спр8.Поставщик="Да";
	КонецЕсли;
	
	Если Спр7.Лицо="Физическое" Тогда		
		Спр8.ЮрФизЛицо=Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;		
	Иначе		
		Спр8.ЮрФизЛицо=Перечисления.КомпанияЧастноеЛицо.Компания;		
	КонецЕсли;
	
    Спр8.ДатаРегистрации=Спр7.ДатаСозд; 
	
	Спр8.Комментарий=Спр7.КомментАдрес+" "+Спр7.Комментарий+" "+Спр7.КомментТелефон+" "+Спр7.КомментУровСанкцБлок+" "+Спр7.КурсПроцКоммент+" "+Спр7.СкидкаКоммент;
			
	Спр8.Записать();
	                                                                 
	return Спр8.Ссылка;

конецфункции 

&НаСервере
функция ДобавитьОбновитьКонтактыПартнера(Счет7,V7)
	 
	Если СтрНайти(Счет7.Вид(),"Счет")=1 Тогда
		Спр7=Счет7.Клиент;
	Иначе
		Спр7=Счет7.Поставщик;
	КонецЕсли;
	
    Спр8=Справочники.Партнеры.НайтиПоНаименованию(Спр7.Наименование,Истина).ПолучитьОбъект();
	Спр8.КонтактнаяИнформация.Очистить();
	
	// Контактная информация партнера
	Если СокрЛП(Спр7.ФактАдрес) <> "" Тогда
		СтрокиКИ=Спр8.КонтактнаяИнформация.Добавить();
		СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокиКИ.Представление=СокрЛП(Спр7.ФактАдрес.Получить(Объект.Период.ДатаОкончания));	
	КонецЕсли; 
	
	Если СокрЛП(Спр7.Телефон) <> "" Тогда
		СтрокиКИ=Спр8.КонтактнаяИнформация.Добавить();
		СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокиКИ.Представление=СокрЛП(Спр7.Телефон);
	КонецЕсли;
	
	Если СокрЛП(Спр7.Почта) <> "" Тогда
		СтрокиКИ=Спр8.КонтактнаяИнформация.Добавить();
		СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокиКИ.Представление=СокрЛП(Спр7.Почта);	
	КонецЕсли;
	
	Спр8.Записать();
	
	// Контактные лица партнера
	Контакты7=V7.CreateObject("Справочник.ФизЛица");
	
	Контакты7.ИспользоватьВладельца(Спр7);
	Результат7=Контакты7.ВыбратьЭлементы(); 
	
	// 1. Проверяем есть ли у текущего клиента 7-ки контакты
	Если Результат7 > 0 Тогда 
		
		// 2. Если есть, удаляем сушествующие контакты партнера в 8-ке
		Выборка=Справочники.КонтактныеЛицаПартнеров.Выбрать(,Спр8.Ссылка);
		Пока Выборка.Следующий() Цикл
			
			Выборка.Ссылка.ПолучитьОбъект().Удалить();
		КонецЦикла;
		
		// 3. Для каждого контакта 7-ки создаем запись в справочнике контактных лиц 8-ки для текущего партнера
		Пока Контакты7.ПолучитьЭлемент()=1 Цикл
			
			Контакты8=Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
			
			Контакты8.Владелец=Спр8.Ссылка;
			
			Если СокрЛП(Контакты7.ПолнНаим) <> "" Тогда
				Контакты8.Наименование=Контакты7.ТекущийЭлемент().ПолнНаим;	
			КонецЕсли;
			
			Контакты8.ДолжностьПоВизитке=Контакты7.Должность.Наименование;
			
			Комменты="";		
			Если СокрЛП(Контакты7.Адрес) <> "" Тогда
				Комменты="Адрес: "+Контакты7.Адрес;	
			КонецЕсли;
			Если СокрЛП(Контакты7.КомментАдрес) <> "" Тогда
				Комменты=Комменты+" Комментарии к Адресу: "+Контакты7.КомментАдрес;	
			КонецЕсли;
			Если СокрЛП(Контакты7.КомментТелеф) <> "" Тогда
				Комменты=Комменты+" Комментарии к Телефону: "+Контакты7.КомментТелеф;	
			КонецЕсли; 
			Если СокрЛП(Контакты7.ТелДом) <> "" Тогда
				Комменты=Комменты+" Домашний Телефон: "+Контакты7.ТелДом;	
			КонецЕсли;
			
			Контакты8.Комментарий=Комменты;
			Контакты8.Автор=Справочники.Пользователи.НайтиПоНаименованию(Счет7.Автор.ФИО,Ложь);
			ДопСведения=""; 
			
			Если СокрЛП(Контакты7.ФИОСчет) <> "" Тогда
				ДопСведения="ФИО Счет: "+Контакты7.ФИОСчет;	
			КонецЕсли; 
			
			Если СокрЛП(Контакты7.Основной.Идентификатор()) <> "" Тогда
				ДопСведения=ДопСведения+" Основной контакт: "+Контакты7.Основной.Идентификатор();	
			КонецЕсли;
			
			Если СокрЛП(Контакты7.ДопСведения) <> "" Тогда
				ДопСведения=ДопСведения+" Другие сведения: "+Контакты7.ДопСведения;	
			КонецЕсли;
			
			Если СокрЛП(Контакты7.Факс) <> "" Тогда
				ДопСведения=ДопСведения+" Факс: "+Контакты7.Факс;	
			КонецЕсли;
			
			Контакты8.ДополнительнаяИнформация=ДопСведения;
			
			Если СокрЛП(Контакты7.Почта) <> "" Тогда  
				СтрокиКИ=Контакты8.КонтактнаяИнформация.Добавить();
				СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
				СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокиКИ.Представление=СокрЛП(Контакты7.Почта);
			КонецЕсли;
			
			Если СокрЛП(Контакты7.ТелМобил) <> "" Тогда  
				СтрокиКИ=Контакты8.КонтактнаяИнформация.Добавить();
				СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
				СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокиКИ.Представление=СокрЛП(Контакты7.ТелМобил);
			КонецЕсли;
			
			Если СокрЛП(Контакты7.Телефон) <> "" Тогда  
				СтрокиКИ=Контакты8.КонтактнаяИнформация.Добавить();
				СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
				СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокиКИ.Представление=СокрЛП(Контакты7.Телефон);
			КонецЕсли;  
			
	        Контакты8.Записать();
		
		КонецЦикла;
		
	КонецЕсли;
	
конецфункции

&НаСервере
функция ДобавитьОбновитьКонтрагента8(Счет7)
			
	ИНН=Счет7.Клиент.ИннКл;
	
	Если СтрНайти(Счет7.Вид(),"Счет")=1 Тогда
		Спр7=Счет7.Клиент;
	Иначе
		Спр7=Счет7.Поставщик;
	КонецЕсли;

	Организация=Справочники.Организации.НайтиПоНаименованию("АЛВ ГРУП ООО"); 
	
	Спр=Справочники.Контрагенты.НайтиПоНаименованию(Спр7.Наименование,Истина);
		
	if Спр.Пустая() then  		
	  	Спр8=Справочники.Контрагенты.СоздатьЭлемент();		
		//Группа=НайтиГруппу1(Справочники.Контрагенты,Спр7); 		
		//Спр8.Родитель=Группа;		
  		Message("Добавлен элемент "+Спр7.Наименование);	
	else  	
	  	Спр8=Спр.ПолучитьОбъект();
  		Message("Обновлен элемент "+Спр7.Наименование);
	endif;
		
  	Спр8.Наименование=Спр7.Наименование;
	
	Спр8.НаименованиеПолное=Спр7.НазваниеПолное.Получить(Объект.Период.ДатаОкончания);
	
	Спр8.НаименованиеМеждународное=Спр7.НазвТранскр;
	
	Спр8.ИНН=Спр7.ИННКл;
	
	Спр8.КПП=Спр7.КПП.Получить(Объект.Период.ДатаОкончания);
			
	Спр8.Партнер=Справочники.Партнеры.НайтиПоНаименованию(Спр7.Наименование,Ложь);			
	
	Если Спр7.Лицо="Физическое" Тогда		
		Спр8.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо;		
	Иначе		
		Спр8.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицо;		
	КонецЕсли;
	
	Спр8.КодПоОКПО=Спр7.КодОКПО.Получить(Объект.Период.ДатаОкончания);

	Спр8.Записать();  
   
	//Кл8=Спр8.Ссылка; 
	
	return Спр8.Ссылка; 
	
конецфункции

&НаСервере
функция ДобавитьОбновитьКонтактыКонтрагента(Счет7,V7)
	
	Если СтрНайти(Счет7.Вид(),"Счет")=1 Тогда
		Спр7=Счет7.Клиент;
	Иначе
		Спр7=Счет7.Поставщик;
	КонецЕсли;;
	
	Спр8=Справочники.Контрагенты.НайтиПоНаименованию(Спр7.Наименование,Истина).ПолучитьОбъект();
	Спр8.КонтактнаяИнформация.Очистить();
		
	// Контактная информация контрагента
	Если СокрЛП(Спр7.ФактАдрес) <> "" Тогда
		СтрокиКИ=Спр8.КонтактнаяИнформация.Добавить();
		СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокиКИ.Представление=СокрЛП(Спр7.ФактАдрес.Получить(Объект.Период.ДатаОкончания));	
	КонецЕсли;
	
	Если СокрЛП(Спр7.ЮрАдрес) <> "" Тогда
		СтрокиКИ=Спр8.КонтактнаяИнформация.Добавить();
		СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокиКИ.Представление=СокрЛП(Спр7.ЮрАдрес);	
	КонецЕсли; 
	
	Если СокрЛП(Спр7.ПочтАдрес.Получить(Объект.Период.ДатаОкончания)) <> "" Тогда
		СтрокиКИ=Спр8.КонтактнаяИнформация.Добавить();
		СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
		СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокиКИ.Представление=СокрЛП(Спр7.ПочтАдрес.Получить(Объект.Период.ДатаОкончания));	
	КонецЕсли;  
	
	Если СокрЛП(Спр7.Факс) <> "" Тогда
		СтрокиКИ=Спр8.КонтактнаяИнформация.Добавить();
		СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
		СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокиКИ.Представление=СокрЛП(Спр7.Факс);
	КонецЕсли;
	
	Если СокрЛП(Спр7.Телефон) <> "" Тогда
		СтрокиКИ=Спр8.КонтактнаяИнформация.Добавить();
		СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокиКИ.Представление=СокрЛП(Спр7.Телефон);
	КонецЕсли;
	
	Если СокрЛП(Спр7.Почта) <> "" Тогда
		СтрокиКИ=Спр8.КонтактнаяИнформация.Добавить();
		СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокиКИ.Представление=СокрЛП(Спр7.Почта);	
	КонецЕсли;  
	
 
	Комменты="";		
	Если СокрЛП(Спр7.Адрес.Получить(Объект.Период.ДатаОкончания)) <> "" Тогда
		Комменты="Колонка Адрес: "+Спр7.Адрес.Получить(Объект.Период.ДатаОкончания);	
	КонецЕсли;
	Если СокрЛП(Спр7.КомментАдрес) <> "" Тогда
		Комменты=Комменты+" Комментарии к Адресу: "+Спр7.КомментАдрес;	
	КонецЕсли;
	Если СокрЛП(Спр7.КомментТелефон) <> "" Тогда
		Комменты=Комменты+" Комментарии к Телефону: "+Спр7.КомментТелефон;	
	КонецЕсли; 
	//Если СокрЛП(Спр7.ТелДом) <> "" Тогда
	//	Комменты=Комменты+" Домашний Телефон: "+Спр7.ТелДом;	
	//КонецЕсли;
	
	Если СокрЛП(Комменты) <> "" Тогда
		Спр8.ДополнительнаяИнформация=Комменты;
	КонецЕсли;	
	
	ДопСведения="";
	Если СокрЛП(Спр7.Сайт) <> "" Тогда
		
	КонецЕсли;	
	
	Если СокрЛП(ДопСведения) <> "" Тогда
		СтрокиКИ=Спр8.КонтактнаяИнформация.Добавить();
		СтрокиКИ.Вид=Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
		СтрокиКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Другое;
		СтрокиКИ.Представление=СокрЛП(ДопСведения);	
	КонецЕсли;
	
	Спр8.Записать();
	
конецфункции

&НаСервере
функция ДобавитьОбновитьБанковскиеСчета(Док,V7)
	
	Если Док.Вид()="Заказ" Тогда
		СпрКл7=Док.Поставщик;
	Иначе
		СпрКл7=Док.Клиент;
	КонецЕсли;
	
	Если СокрЛП(СпрКл7.Расч_Счет.Получить(Объект.Период.ДатаОкончания)) <> "" Тогда		
				
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	*
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.НомерСчета=&РасчетыйСчет";
		
		Запрос.УстановитьПараметр("РасчетыйСчет",СокрЛП(СпрКл7.Расч_Счет.Получить(Объект.Период.ДатаОкончания)));
		
		Результат=Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Банк8=Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Банк8=Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			Банк8.НомерСчета=СокрЛП(СпрКл7.Расч_Счет.Получить(Объект.Период.ДатаОкончания));
			Банк8.Владелец=Справочники.Контрагенты.НайтиПоНаименованию(СпрКл7.Наименование,Ложь);
		КонецЕсли;
		
		Банк8.Наименование="Основной счет";
		
		Бик=СокрЛП(СпрКл7.МФО.Получить(Объект.Период.ДатаОкончания));
		Банк8.НаименованиеБанка=СпрКл7.Банк.Получить(Объект.Период.ДатаОкончания);
		
		Банк8.БИКБанка=Бик;
		
		Банк8.Банк=Справочники.КлассификаторБанков.НайтиПоКоду(Бик,Ложь); 
		
		Банк8.КоррСчетБанка=СпрКл7.Корр_счет.Получить(Объект.Период.ДатаОкончания);
		
		Банк8.ВалютаДенежныхСредств=Справочники.Валюты.НайтиПоКоду("643",Ложь); 
		
		Банк8.АдресБанка=СпрКл7.АдресБанка.Получить(Объект.Период.ДатаОкончания);
		
		Попытка
			Банк8.Записать();
		Исключение   
			Инфо = ИнформацияОбОшибке();
			Сообщить("Описание: '" + Инфо.Описание + "'");
		КонецПопытки;
		
		return Банк8.Ссылка;
	
	КонецЕсли;
			
конецфункции

&НаСервере
функция ОпределитьВидНоменклатуры(Тов7,видСч)
	
	ставка=Тов7.СтавкаНДС.Получить(ТекущаяДата()).Идентификатор();
	
	Если СтрНайти(видСч,"СчетCSP")=1 Тогда
		ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга CSP",Истина).Ссылка; 
	Иначе
		// Виды номенклатуры в зависимости от типа, НДС и направления
		этоЛицензия=СокрЛП(Тов7.ФлагЛицензии.Идентификатор());
		типТовара=СокрЛП(Тов7.ВидТовара.Идентификатор());
		направление=СокрЛП(Тов7.Направление.Наименование);
		
		Если (типТовара="Товар") И (этоЛицензия="Да") И ((ставка="безНДС") ИЛИ (ставка="НулеваяБезНДС")) Тогда	
			ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Лицензии без НДС",Истина).Ссылка;
		КонецЕсли;
		
		Если (типТовара="Товар") И (этоЛицензия="Да") И ((ставка="ЛьготнаяСтавкаНДС") ИЛИ (ставка="СтараяОснСтавкаНДС") ИЛИ (ставка="ОсновнаяСтавкаНДС")) Тогда		
			ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Лицензии с НДС",Истина).Ссылка;		
		КонецЕсли;
		
		Если (типТовара="Товар") И (этоЛицензия="Нет") Тогда		
			ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар",Истина).Ссылка;
		КонецЕсли;
		
		полнаяИерархия=Тов7.ПолноеНаименование();
		иерархияПоЧастям=СтрРазделить(полнаяИерархия,"/",Ложь);
		
		типПоИерархии=иерархияПоЧастям.Получить(0);
		
		Попытка 		
			видПоИерархии=иерархияПоЧастям.Получить(1);			
		Исключение
			Сообщить("Ошибка при определении вида по иератхии");	
			видПоИерархии="";
		КонецПопытки;
			
		Если типПоИерархии="Оплата договоров" Тогда
			ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар",Истина).Ссылка; 
		КонецЕсли;     
		
		Если типПоИерархии="Разработка ПО" Тогда
			ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга сторонней организации",Истина).Ссылка;
		КонецЕсли;
		
		Если типПоИерархии="УСЛУГИ" Тогда
			
			Если (видПоИерархии="Cisco - закрываем актом") 
				ИЛИ (видПоИерархии="Quest - закрываем актом") 
				ИЛИ (видПоИерархии="MyQ") 
				ИЛИ (видПоИерархии="Виртуальные услуги") 
				ИЛИ (видПоИерархии="Техническая поддержка Форс") 
				ИЛИ (видПоИерархии="Услуги сторонних фирм") Тогда				
				
				ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга сторонней организации",Истина).Ссылка;				
				
			КонецЕсли;
			
			Если видПоИерархии="Типовые услуги сервисного обслуживания" Тогда  
				
				ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга сторонней организации",Истина).Ссылка; 
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли; 
	
	Возврат ВидНоменклатуры;
	
конецфункции 

&НаСервере
функция ОпределитьТипНоменклатуры(Тов7,видСч)
	
	ставка=Тов7.СтавкаНДС.Получить(ТекущаяДата()).Идентификатор();
		
	Если СтрНайти(видСч,"СчетCSP")=1 Тогда
		ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Товар; 
	Иначе
		// Виды номенклатуры в зависимости от типа, НДС и направления
		этоЛицензия=СокрЛП(Тов7.ФлагЛицензии.Идентификатор());
		типТовара=СокрЛП(Тов7.ВидТовара.Идентификатор());
		направление=СокрЛП(Тов7.Направление.Наименование);
		
		Если (типТовара="Товар") И (этоЛицензия="Да") И ((ставка="безНДС") ИЛИ (ставка="НулеваяБезНДС")) Тогда	
			ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Товар;
		КонецЕсли;
		
		Если (типТовара="Товар") И (этоЛицензия="Да") И ((ставка="ЛьготнаяСтавкаНДС") ИЛИ (ставка="СтараяОснСтавкаНДС") ИЛИ (ставка="ОсновнаяСтавкаНДС")) Тогда			
			ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Товар;	
		КонецЕсли;
		
		Если (типТовара="Товар") И (этоЛицензия="Нет") Тогда		

			ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Товар;
		КонецЕсли;
		
		полнаяИерархия=Тов7.ПолноеНаименование();
		иерархияПоЧастям=СтрРазделить(полнаяИерархия,"/",Ложь);
		
		типПоИерархии=иерархияПоЧастям.Получить(0); 
		Попытка
			видПоИерархии=иерархияПоЧастям.Получить(1);
		Исключение 
			Сообщить("Ошибка при определении вида по иератхии");
			видПоИератхии="";
		КонецПопытки;
			
		Если типПоИерархии="Оплата договоров" Тогда
			ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Товар; 
		КонецЕсли;     
		
		Если типПоИерархии="Разработка ПО" Тогда
			ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Работа;
		КонецЕсли;
		
		Если типПоИерархии="УСЛУГИ" Тогда
			
			Если (видПоИерархии="Cisco - закрываем актом") 
				ИЛИ (видПоИерархии="Quest - закрываем актом") 
				ИЛИ (видПоИерархии="MyQ") 
				ИЛИ (видПоИерархии="Виртуальные услуги") 
				ИЛИ (видПоИерархии="Техническая поддержка Форс") 
				ИЛИ (видПоИерархии="Услуги сторонних фирм") Тогда
				
				ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Работа; 
				
			КонецЕсли;
			
			Если видПоИерархии="Типовые услуги сервисного обслуживания" Тогда  
				
				ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Услуга;  
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ТипНоменклатуры;

конецфункции

&НаСервере
функция ОпределитьКатегориюТовара(Тов7,видСч)
	
	ставка=Тов7.СтавкаНДС.Получить(ТекущаяДата()).Идентификатор();
	
	КатегорияТовара="";	
	Если СтрНайти(видСч,"СчетCSP")=1 Тогда
		КатегорияТовара=Справочники.ТоварныеКатегории.НайтиПоНаименованию("Услуга CSP",Ложь); 
	Иначе
		// Виды номенклатуры в зависимости от типа, НДС и направления
		этоЛицензия=СокрЛП(Тов7.ФлагЛицензии.Идентификатор());
		типТовара=СокрЛП(Тов7.ВидТовара.Идентификатор());
		направление=СокрЛП(Тов7.Направление.Наименование);
		
		Если (типТовара="Товар") И (этоЛицензия="Да") И ((ставка="безНДС") ИЛИ (ставка="НулеваяБезНДС")) Тогда	
			КатегорияТовара=Справочники.ТоварныеКатегории.НайтиПоНаименованию("Лицензии без НДС",Ложь);
		КонецЕсли;
		
		Если (типТовара="Товар") И (этоЛицензия="Да") И ((ставка="ЛьготнаяСтавкаНДС") ИЛИ (ставка="СтараяОснСтавкаНДС") ИЛИ (ставка="ОсновнаяСтавкаНДС")) Тогда			
			КатегорияТовара=Справочники.ТоварныеКатегории.НайтиПоНаименованию("Лицензии с НДС",Ложь);	
		КонецЕсли;
		
		Если (типТовара="Товар") И (этоЛицензия="Нет") Тогда		
			КатегорияТовара=Справочники.ТоварныеКатегории.НайтиПоНаименованию("Товар",Ложь);
		КонецЕсли;
		
		полнаяИерархия=Тов7.ПолноеНаименование();
		иерархияПоЧастям=СтрРазделить(полнаяИерархия,"/",Ложь);
		
		типПоИерархии=иерархияПоЧастям.Получить(0);
		
		Попытка
			видПоИерархии=иерархияПоЧастям.Получить(1);
		Исключение
			Сообщить("Ошибка при определении вида по иератхии");
			видПоИерархии="";
		КонецПопытки;
			
		Если типПоИерархии="Оплата договоров" Тогда
			КатегорияТовара=Справочники.ТоварныеКатегории.НайтиПоНаименованию("Услуга",Ложь); 
		КонецЕсли;     
		
		Если типПоИерархии="Разработка ПО" Тогда
			КатегорияТовара=Справочники.ТоварныеКатегории.НайтиПоНаименованию("Программное обеспечение",Ложь);
		КонецЕсли;
		
		Если типПоИерархии="УСЛУГИ" Тогда
			
			Если (видПоИерархии="Cisco - закрываем актом") 
				ИЛИ (видПоИерархии="Quest - закрываем актом") 
				ИЛИ (видПоИерархии="MyQ") 
				ИЛИ (видПоИерархии="Виртуальные услуги") 
				ИЛИ (видПоИерархии="Техническая поддержка Форс") 
				ИЛИ (видПоИерархии="Услуги сторонних фирм") Тогда
				
				ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Работа; 
				
			КонецЕсли;
			
			Если видПоИерархии="Типовые услуги сервисного обслуживания" Тогда  
				
				ТипНоменклатуры=Справочники.ТоварныеКатегории.НайтиПоНаименованию("Услуга",Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат КатегорияТовара;

конецфункции

&НаСервере
функция ДобавитьОбновитьТовар(Тов7,видСч)
	
	Группа=НайтиГруппу1(Справочники.Номенклатура,Тов7);
	
	Спр=Справочники.Номенклатура.НайтиПоНаименованию(Тов7.Наименование,Истина);
	
	if Спр.Пустая() then 
		// Create new product
	  	Тов8=Справочники.Номенклатура.СоздатьЭлемент(); 
		
  		Message("Добавлен элемент "+Тов7.Наименование+" в каталоге "+Группа.Наименование); 
		
		Тов8.ВидНоменклатуры=ОпределитьВидНоменклатуры(Тов7,видСч);
		Тов8.ТипНоменклатуры=ОпределитьТипНоменклатуры(Тов7,видСч);
		Тов8.Наименование=Тов7.Наименование; 
		Тов8.НаименованиеПолное=УбратьНедопустимыеСимволы(Тов7.ПолнНаим);
	
	else   
		// Update existing product
	  	Тов8=Спр.ПолучитьОбъект();
		
		// Проверить изменился ли вид номенклатуры
		старыйВид=Тов8.ВидНоменклатуры;
		новыйВид=ОпределитьВидНоменклатуры(Тов7,видСч);
		
		Если старыйВид.Наименование <> "" И новыйВид.Наименование <> "" И старыйВид <> новыйВид Тогда
			
			Тов8=Справочники.Номенклатура.СоздатьЭлемент();
			Тов8.ВидНоменклатуры=новыйВид;
			Тов8.Наименование=Тов7.Наименование+" "+новыйВид.Наименование;
			Тов8.НаименованиеПолное=Тов7.ПолнНаим+" "+новыйВид.Наименование;
			
		КонецЕсли;
		
		Тов8.ТипНоменклатуры=ОпределитьТипНоменклатуры(Тов7,видСч);
	  
  		Message("Обновлен элемент "+Тов7.Наименование+" в каталоге "+Группа.Наименование);
		
	endif;
		
	 Тов8.Родитель=Группа;
		
  	Тов8.ТоварнаяКатегория=ОпределитьКатегориюТовара(Тов7,видСч);  

	Тов8.Артикул=Тов7.КодТипа;  
	
	Тов8.Производитель=ДобавитьОбновитьПроизводителя(Тов7);
		                                               
	ставка=Тов7.СтавкаНДС.Получить(ТекущаяДата()).Идентификатор();
	
	валЗакуп=Тов7.ВалютаЗакуп.Получить(ТекущаяДата()).Наименование;
	
	if ставка="ЛьготнаяСтавкаНДС" then
		Тов8.СтавкаНДС=Справочники.СтавкиНДС.НаитиПоНаименованию("10%",Истина);
	endif;
	if ставка="СтараяОснСтавкаНДС" then
		Тов8.СтавкаНДС=Справочники.СтавкиНДС.НайтиПоНаименованию("18%",Истина);
	endif;
	if ставка="ОсновнаяСтавкаНДС" then
		Тов8.СтавкаНДС=Справочники.СтавкиНДС.НайтиПоНаименованию("20%",Истина);
	endif;
	if ставка="безНДС" then
		Тов8.СтавкаНДС=Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС",Истина);	
	endif;  
	if ставка="НулеваяБезНДС" then
		Тов8.СтавкаНДС=Справочники.СтавкиНДС.НайтиПоНаименованию("0%",Истина);	
	endif;  
	
	Вид=Тов7.БазоваяЕдиница.Наименование;
	
	Вид=СтрЗаменить(Вид,"ящик","ящ");
	
	Вид=СтрЗаменить(Вид,"метр","м"); 
	
	Вид=СтрЗаменить(Вид,"штука","шт");
	
	Вид=СтрЗаменить(Вид,"штук","шт"); 
	
	Вид=СтрЗаменить(Вид,"шт.","шт");
	
	Вид=СтрЗаменить(Вид,"канистра","кан"); 
	
	Вид=СтрЗаменить(Вид,"пач","пачка"); 
	
	Вид=СтрЗаменить(Вид,"пачкака","пачка"); 
	
	Вид=СтрЗаменить(Вид,"УПАКОВКА","упак");
	
	Вид=СтрЗаменить(Вид,"упаковка","упак");
	
	Вид=СтрЗаменить(Вид,"уп.","упак");
	
	Вид=СтрЗаменить(Вид,"упак.","упак"); 
	
	Вид=СтрЗаменить(Вид,"кмп","компл");
	
	Вид=СтрЗаменить(Вид,"пакет","пак"); 
	
	Вид=СтрЗаменить(Вид,"рулон","рул"); 
	
	Вид=СтрЗаменить(Вид,"шт","Штука");
	
	Ед1=Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(Вид,Истина);
	
	Выб=Справочники.УпаковкиЕдиницыИзмерения.Выбрать();
	
	while Выб.Следующий() do
		
		if Выб.НаименованиеПолное=Вид then
			
			Ед1=Выб.Ссылка;
			
			break; 
			
		endif; 
		
	enddo; 
	
	Тов8.ЕдиницаИзмерения=Ед1; 
	
	if Ед1.Пустая()=Истина then 
		
		Message("Нет единицы "+Тов7.БазоваяЕдиница.Наименование,СтатусСообщения.ОченьВажное); 
		
	endif;
	
	Тов8.КоэффициентЕдиницыДляОтчетов=1;
	
	Тов8.ОсобенностьУчета=Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета; 
	
	Тов8.ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	
	Тов8.ИспользованиеХарактеристик=Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;	
	
	Тов8.Качество=Перечисления.ГрадацииКачества.Новый;
	
	try 
		
		Тов8.Записать();
		
	except 
		
		Инфо=ИнформацияОбОшибке();
		Message(Инфо.Описание + " "+Инфо.Причина);
		
		Тов8.Наименование=Тов8.Наименование+ТекущаяДата(); 
		Тов8.Записать();
		
	endtry; 
	
	return Тов8.Ссылка;
	
конецфункции	//ДобавитьТовар

&НаСервере
функция НайтиГруппу1(Спр8,Спр,ПоКоду=0,Доб="00000000000")
	
	if Спр.Родитель.Выбран()=0 then
		
		return Спр8.ПустаяСсылка();  
		
	endif; 
	
	if ПоКоду<>1 then 
		
		Группа=Спр8.НайтиПоНаименованию(Спр.Родитель.Наименование,Истина);   
		
	else 
		
		Группа=Спр8.НайтиПоКоду(Спр.Родитель.Код); 
		
		if Доб<>"" then
			
			Спр2=Спр8.СоздатьГруппу();
			
			Спр2.Код=Прав(TrimAll(Доб+Спр.Родитель.Код),StrLen(Спр2.Код));
			
			Группа=Спр8.НайтиПоКоду(Спр2.Код);	
			
		endif 
		
	endif; 
	
	if НЕ Группа.Пустая() then
		
		return Группа;  
		
		Спр2=Группа.ПолучитьОбъект();
		
//  	s="Обновлена группа "+Спр2.Код+" "+Спр2.Наименование+" в каталоге "+Спр2.Родитель.Наименование+" для справочника "+Вид(Спр); 

		s="Обновлена группа ";	//+Спр2.Код+" "+Спр2.Наименование+" в каталоге "+Спр2.Родитель.Наименование+" для справочника "+Вид(Спр); 
	else  
		
		Спр2=Спр8.СоздатьГруппу(); 
  	
		// s="Добавлена группа "+Спр.Родитель.Код+" "+Спр.Родитель.Наименование+" в каталоге "+Спр.Родитель.Наименование+" для справочника "+Вид(Спр); 
		
		s="Добавлена группа ";	//+Спр.Родитель.Код+" "+Спр.Родитель.Наименование+" в каталоге "+Спр.Родитель.Наименование+" для справочника "+Вид(Спр); 
		
	endif;  
	
//		if Группа.Родитель.Наименование<>Спр.Родитель.Наименование then
//			Гр2=Группа.ПолучитьОбъект();
//			Гр2.Родитель=Род;
//			Гр2.Записать();
//		endif;

	if (Спр2.Наименование<>Спр.Родитель.Наименование) or ((1=1) И (Спр2.Родитель.Наименование<>Спр.Родитель.Родитель.Наименование)) then
		
		if ПоКоду=1 then
			
			Спр2.Код=Спр.Родитель.Код;
			
			if Доб<>"" then
				
				Спр2.Код=Прав(TrimAll(Доб+Спр2.Код),StrLen(Спр2.Код));
				
			endif  
			
		endif;   
		
		Спр2.Наименование=Спр.Родитель.Наименование;   
		
		Спр2.Родитель=НайтиГруппу1(Спр8,Спр.Родитель,ПоКоду,Доб);  
		
		Спр2.Записать();  
		
//		Message(s); 

	 	Message(s+Спр2.Код+" "+Спр2.Наименование+" в каталоге "+Спр2.Родитель.Наименование+" для справочника "+Спр.Вид()); 
		
	endif;
	
	return Спр2.Ссылка;
	
конецфункции 

&НаСервере
функция ДобавитьОбновитьПроизводителя(Тов7)   
	
	всеКоды=Тов7.ПолноеНаименование();
	
	кодПроизводителяПоЧастям=СтрРазделить(всеКоды,"/",Ложь); 
	
	// Если группа не торвары возвращаем пустое значение
	Если кодПроизводителяПочастям.Получить(0) <> "ТОВАРЫ" Тогда
		Возврат Справочники.Производители.ПустаяСсылка();
	КонецЕсли;

	наименованиеПроизводителя=кодПроизводителяПоЧастям.Получить(1);
	
	// Проверить, существует ли такой производитель в справочнике 8-ки
	Если Справочники.Производители.НайтиПоНаименованию(наименованиеПроизводителя,Истина).Пустая() Тогда
		СпрПроизв8=Справочники.Производители.СоздатьЭлемент();
	Иначе
		СпрПроизв8=Справочники.Производители.НайтиПоНаименованию(наименованиеПроизводителя,Истина).ПолучитьОбъект();
	КонецЕсли;
	
	СпрПроизв8.Наименование=наименованиеПроизводителя;  
	
	СпрПроизв8.Записать();
	
	Возврат СпрПроизв8.Ссылка;
	
конецфункции

 &НаСервере
 функция МожноЗагружатьЗаказ(Счет8,Табл)
	  
	if НЕ Счет8.Проведен then	//-1=True
		return 1;
	endif;
	
	if Табл.Контрагент.Наименование<>Счет8.Контрагент.Наименование then
		return 1;
	endif; 
	
	if not Табл.Строки.Количество() then
		return 1;
	endif;
 
	if not Табл.Строки.Итог("Сумма") then
		return 1;
	endif; 
	
	return 0; 
	
конецфункции

&НаСервере
функция ИзвлечьЦифры(номерДок)
	
	Если ТипЗнч(номерДок) <> Тип("Строка") Тогда
		Возврат "";
	КонецЕсли;
	
	// Извлечь цифры справа
    номер=СтрЗаменить(номерДок," ","");
	
	длина=СтрДлина(номер);

	цифры="";
	
	Для индекс=1 По длина Цикл
			
		Символ = Прав(номер,1);
		Если Найти("0123456789()",Символ) > 0 Тогда
			цифры=Символ+цифры;
		Иначе
			Прервать;
		КонецЕсли;
		номер = Лев(номер,длина-индекс);
		
	КонецЦикла; 
		
	// Добавить нули до 8 знаков - максдлина
	максДлина=11;
	Для индекс=1 По максДлина-СтрДлина(цифры) Цикл
		цифры="0"+цифры;	
	КонецЦикла;
	
	Возврат СокрЛП(цифры);
	
конецфункции


&НаСервере
функция УбратьНедопустимыеСимволы(вхТекст)
	
	НедопустимыйСимвол=НайтиНедопустимыеСимволыXML(вхТекст);
	ТекНаименование="";
	Пока НедопустимыйСимвол > 0 Цикл
			
			ЛеваяЧасть = ?(НедопустимыйСимвол = 1, "", Лев(ТекНаименование, НедопустимыйСимвол-1));
    		ПраваяЧасть = ?(НедопустимыйСимвол = СтрДлина(ТекНаименование), "", Сред(ТекНаименование, НедопустимыйСимвол+1)); 
   			ТекНаименование = ЛеваяЧасть+"_"+ПраваяЧасть;
   			НедопустимыйСимвол = НайтиНедопустимыеСимволыXML(ТекНаименование);
			
		КонецЦикла;
		
		Если вхТекст <> ТекНаименование Тогда
			
			Возврат ТекНаименование;
		Иначе
			Возврат вхТекст;
		КонецЕсли;
	
	
конецфункции

